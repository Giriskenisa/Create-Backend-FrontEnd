package com.abt.controller;


import com.abt.customQuery.PersonelDaoCustom;
import com.abt.entitiy.className;
import com.abt.personel.repostory.classNameDao;
import com.abt.utility.Filter;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.support.DefaultMessageSourceResolvable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.text.ParseException;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

@RestController
@RequestMapping("/serverpath")
public class classNameController {

    @Autowired
    classNameDao objectNameDao;


    @PostMapping("/save")
    ResponseEntity<Object> save(@Valid @RequestBody className objectName, BindingResult result) throws Exception {
        if(result.hasErrors()){
            List<String> errors = result.getAllErrors().stream()
                    .map(DefaultMessageSourceResolvable::getDefaultMessage)
                    .collect(Collectors.toList());
            throw new Exception(errors.get(0))
        }else{

            className objectName1 =   objectNameDao.save(objectName);
                if(objectName != null){
                return new ResponseEntity<> (objectName1,HttpStatus.CREATED);
                }
                else{
                throw new Exception("Veri Kayıt Edilemedi");
                }

        }
    }



    @PutMapping("/update/{id}")
    ResponseEntity<Object> update(@RequestBody className newclassName, BindingResult result, @PathVariable("id") Long id) throws Exception{

        if(result.hasErrors()){
            List<String> errors = result.getAllErrors().stream()
                    .map(DefaultMessageSourceResolvable::getDefaultMessage)
                    .collect(Collectors.toList());
            throw new Exception(errors.get(0))
        }else{
            className objectName  = objectNameDao.findById(id).get();
            BeanUtils.copyProperties(newclassName,objectName);

           className objectName1 =  objectNameDao.save(objectName);
           if(objectName1 != null){
           return new ResponseEntity<>(objectName1,HttpStatus.CREATED);
           }
           else
           {
            throw new Exception("Veriler Güncellenemedi");
           }

        }
    }


    @DeleteMapping("/delete/{id}")
    public ResponseEntity delete(@PathVariable("id") Long id) throws Exception{
        objectNameDao.deleteById(id);
        return ResponseEntity.ok().build();
    }

//filtre

    @GetMapping("/getList")
    public ResponseEntity<List<Map<String,String >>> getList(@RequestParam Map<String,String> params) throws ParseException {
        Filter filter  = new Filter(params);

        return ResponseEntity.ok(objectNameDao.getList(
                filtreEklenecek
        ));
    }

    @GetMapping("/findById/{id}")
    ResponseEntity <className> get(@PathVariable("id") Long id){
        className objectName  =  objectNameDao.findById(id).get();
        return ResponseEntity.ok(objectName);
    }


}
